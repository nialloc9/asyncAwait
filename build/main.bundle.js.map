{"version":3,"sources":["webpack:///webpack/bootstrap ee13f9b5d344cbc0b1ff","webpack:///./src/common/waitFunction.js","webpack:///./src/main.js","webpack:///./src/nestedPromises.js","webpack:///./src/asyncAwait.js","webpack:///./src/asyncAwaitWithErrorHandler.js","webpack:///./src/common/errorHandler.js","webpack:///./src/promiseAll.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;;AAED,uE;;;;;;;;;;;;ACVA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,uF;;;;;;;;ACfA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA,yE;;;;;;;;ACbA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA,qE;;;;;;;;ACrBA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,qF;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;;AAEA,uE;;;;;;;;ACPA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA,qE","file":"main.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ee13f9b5d344cbc0b1ff","/**\n * a function that resolves after 2 seconds\n * @param message\n */\nconst waitFunction = message => new Promise(resolve => {\n    setTimeout(() => {\n        resolve(message);\n    }, 2000);\n});\n\nexport default waitFunction;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/waitFunction.js\n// module id = 0\n// module chunks = 0","import nestedPromises from './nestedPromises';\nimport asyncAwait from './asyncAwait';\nimport asyncAwaitWithErrorHandler from './asyncAwaitWithErrorHandler';\nimport promiseAll from './promiseAll';\n\n// this is better than callback hell but can get confusing as more promises are nested\nnestedPromises();\n\n// async await cleans it up and makes it much more readable\nasyncAwait();\n\n// promise all can be use to run multiple promises at the same time. However, the try/catch will be the same.\npromiseAll();\n\n// a helper higher order function can be used to catch errors instead of a try catch as above\nasyncAwaitWithErrorHandler();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main.js\n// module id = 1\n// module chunks = 0","import waitFunction from './common/waitFunction';\n\n/**\n * these are nested promises. They get very messy the more you have.\n */\nconst nestedPromises = () => {\n    waitFunction(\"hello\").then(result => {\n        waitFunction(\"world\").then(result2 => {\n            console.log(result + \" \" + result2);\n        })\n    })\n};\n\nexport default nestedPromises;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/nestedPromises.js\n// module id = 2\n// module chunks = 0","import waitFunction from './common/waitFunction';\n\n/**\n * an example of async await\n * @returns {Promise.<void>}\n */\nconst asyncAwait = async () => {\n\n    // assigns value resolved to const\n    try {\n        const messageOne = await waitFunction(\"hello\");\n        const messageTwo = await waitFunction(\"world\");\n\n        // prints out hello world\n        console.log(messageOne + \" \" + messageTwo);\n    } catch (error) {\n        console.log(\"error1\", error);\n    }\n\n};\n\nexport default asyncAwait;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/asyncAwait.js\n// module id = 3\n// module chunks = 0","import errorHandler from './common/errorHandler';\n\n/**\n * throws an error\n */\nconst throwError = () => new Promise((resolve, reject) => reject(\"Error thrown in throwError\"));\n\n/**\n * a higher order function errorHandler can be used to remove the need for try catch statements\n * @returns {Promise.<void>}\n */\nconst asyncAwaitWithErrorHandler = async () => {\n\n    // assigns value resolved to const\n    const [error, data] = await errorHandler(throwError());\n\n    if(error){\n        console.log(error);\n    }\n};\n\nexport default asyncAwaitWithErrorHandler;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/asyncAwaitWithErrorHandler.js\n// module id = 4\n// module chunks = 0","/**\n * handles errors in async functions\n * @param promise\n * returns an array. first item is an error second is the result\n */\nconst errorHandler = promise => promise.then(data =>  [null, data]).catch(err => [err]);\n\nexport default errorHandler;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/common/errorHandler.js\n// module id = 5\n// module chunks = 0","import waitFunction from './common/waitFunction';\n\n/**\n * an example of using promise.all with async await\n * @returns {Promise.<void>}\n */\nconst promiseAll = async () => {\n    const [a, b] = await Promise.all([\n        waitFunction(\"promise\"),\n        waitFunction(\"all\")\n    ]).catch(error => {\n        console.log(\"promiseAll error\", error);\n    });\n\n    console.log(\"promiseAll a: \", a);\n    console.log(\"promiseAll b: \", b);\n};\n\nexport default promiseAll;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/promiseAll.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}